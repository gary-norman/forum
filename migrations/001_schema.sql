PRAGMA journal_mode = MEMORY;
PRAGMA synchronous = OFF;
PRAGMA foreign_keys = ON;
PRAGMA ignore_check_constraints = OFF;
PRAGMA auto_vacuum = NONE;
PRAGMA secure_delete = OFF;

BEGIN TRANSACTION;

CREATE TABLE IF NOT EXISTS Users (
    ID BLOB PRIMARY KEY,
    Username TEXT NOT NULL UNIQUE,
    EmailAddress TEXT NOT NULL UNIQUE,
    Avatar TEXT UNIQUE,
    Banner TEXT,
    Description TEXT,
    Usertype TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    IsFlagged INTEGER NOT NULL CHECK (IsFlagged IN (0,1)),
    SessionToken TEXT,
    CsrfToken TEXT,
    HashedPassword TEXT NOT NULL,
    CookiesExpire DATETIME
);

CREATE TABLE IF NOT EXISTS Channels (
    ID INTEGER PRIMARY KEY,
    OwnerID BLOB NOT NULL,
    Name TEXT NOT NULL UNIQUE,
    Avatar TEXT,
    Banner TEXT,
    Description TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Privacy INTEGER NOT NULL CHECK (Privacy IN (0,1)),
    IsMuted INTEGER NOT NULL CHECK (IsMuted IN (0,1)),
    IsFlagged INTEGER NOT NULL CHECK (IsFlagged IN (0,1)),
    FOREIGN KEY (OwnerID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Posts (
    ID INTEGER PRIMARY KEY,
    Title TEXT NOT NULL,
    Content TEXT NOT NULL,
    Images TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    IsCommentable INTEGER NOT NULL CHECK (IsCommentable IN (0,1)),
    Author TEXT NOT NULL,
    AuthorID BLOB NOT NULL,
    AuthorAvatar TEXT,
    IsFlagged INTEGER NOT NULL CHECK (IsFlagged IN (0,1)),
    FOREIGN KEY (Author) REFERENCES Users(Username) ON DELETE CASCADE,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar)
);

CREATE TABLE IF NOT EXISTS Comments (
    ID INTEGER PRIMARY KEY,
    Content TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CommentedPostID INTEGER,
    CommentedCommentID INTEGER,
    IsCommentable INTEGER NOT NULL CHECK (IsCommentable IN (0,1)),
    IsFlagged INTEGER NOT NULL CHECK (IsFlagged IN (0,1)),
    IsReply INTEGER NOT NULL CHECK (IsReply IN (0,1)),
    Author TEXT NOT NULL,
    AuthorID BLOB NOT NULL,
    AuthorAvatar TEXT,
    ChannelName TEXT NOT NULL,
    ChannelID INTEGER NOT NULL,
    FOREIGN KEY (Author) REFERENCES Users(Username) ON DELETE CASCADE,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar) ON DELETE CASCADE,
    FOREIGN KEY (ChannelName) REFERENCES Channels(Name),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (CommentedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (CommentedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Bookmarks (
    ID INTEGER PRIMARY KEY,
    PostID INTEGER,
    CommentID INTEGER,
    ChannelID INTEGER,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (CommentID) REFERENCES Comments(ID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Flags (
    ID INTEGER PRIMARY KEY,
    FlagType TEXT NOT NULL,
    Content TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Approved INTEGER NOT NULL CHECK (Approved IN (0,1)),
    AuthorID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    FlaggedUserID BLOB,
    FlaggedPostID INTEGER,
    FlaggedCommentID INTEGER,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedUserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Followers (
    ID INTEGER PRIMARY KEY,
    UserID BLOB NOT NULL,
    FollowerUserID BLOB NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FollowerUserID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Following (
    ID INTEGER PRIMARY KEY,
    UserID BLOB NOT NULL,
    FollowingUserID BLOB NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FollowingUserID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Images (
    ID INTEGER PRIMARY KEY,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID BLOB NOT NULL,
    PostID INTEGER NOT NULL,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Memberships (
    ID INTEGER PRIMARY KEY,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Mods (
    ID INTEGER PRIMARY KEY,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS MutedChannels (
    ID INTEGER PRIMARY KEY,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Notifications (
    ID INTEGER PRIMARY KEY,
    Notification TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Read INTEGER NOT NULL CHECK (Read IN (0,1)),
    Archived INTEGER NOT NULL CHECK (Archived IN (0,1))
);

CREATE TABLE IF NOT EXISTS NotificationsUsers (
    ID INTEGER PRIMARY KEY,
    UserID BLOB,
    NotificationID INTEGER,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID),
    FOREIGN KEY (NotificationID) REFERENCES Notifications(ID)
);

CREATE TABLE IF NOT EXISTS PostChannels (
    ID INTEGER PRIMARY KEY,
    PostID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS PostImages (
    ID INTEGER PRIMARY KEY,
    PostID INTEGER NOT NULL,
    ImageID TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ImageID) REFERENCES Images(ID)
);

CREATE TABLE IF NOT EXISTS PostReplies (
    ID INTEGER PRIMARY KEY,
    ParentPostID INTEGER NOT NULL,
    ReplyID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ParentPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReplyID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Reactions (
    ID INTEGER PRIMARY KEY,
    Liked INTEGER NOT NULL CHECK (Liked IN (0,1)),
    Disliked INTEGER NOT NULL CHECK (Disliked IN (0,1)),
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID BLOB NOT NULL,
    ReactedPostID INTEGER,
    ReactedCommentID INTEGER,
    CHECK ((Liked IN (0,1)) AND (Disliked IN (0,1)) AND NOT (Liked=1 AND Disliked=1)),
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReactedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReactedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Rules (
    ID INTEGER PRIMARY KEY,
    Rule TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Predefined INTEGER NOT NULL CHECK (Predefined IN (0,1))
);

CREATE TABLE IF NOT EXISTS ChannelsRules (
    ID INTEGER PRIMARY KEY,
    ChannelID INTEGER NOT NULL,
    RuleID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Updated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ChannelID, RuleID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (RuleID) REFERENCES Rules(ID)
);

COMMIT;

PRAGMA ignore_check_constraints = OFF;
PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;

