PRAGMA journal_mode = MEMORY; -- volatile for testing
PRAGMA synchronous = OFF;
-- PRAGMA journal_mode = WAL;
-- PRAGMA synchronous = NORMAL;
PRAGMA foreign_keys = ON;
PRAGMA ignore_check_constraints = OFF;
PRAGMA auto_vacuum = NONE;
PRAGMA secure_delete = OFF;

BEGIN TRANSACTION;

CREATE TABLE IF NOT EXISTS Users (
    ID BLOB PRIMARY KEY,
    SortID INTEGER NOT NULL,
    Username TEXT NOT NULL UNIQUE,
    EmailAddress TEXT NOT NULL UNIQUE,
    Avatar TEXT,
    Banner TEXT,
    Description TEXT,
    Usertype TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    IsFlagged BOOLEAN,
    SessionToken TEXT,
    CsrfToken TEXT,
    HashedPassword TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Bookmarks (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    PostID INTEGER,
    CommentID INTEGER,
    ChannelID INTEGER, 
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (CommentID) REFERENCES Comments(ID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Following (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB NOT NULL,
    FollowingUserID BLOB NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FollowingUserID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Followers (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB NOT NULL,
    FollowerUserID BLOB NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FollowerUserID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Channels (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    OwnerID BLOB NOT NULL,
    Name TEXT NOT NULL,
    Avatar TEXT,
    Banner TEXT,
    Description TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Privacy BOOLEAN NOT NULL,
    IsMuted BOOLEAN NOT NULL,
    IsFlagged BOOLEAN,
    FOREIGN KEY (OwnerID) REFERENCES Users(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Rules (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Rule TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Predefined BOOLEAN
);

CREATE TABLE IF NOT EXISTS ChannelsRules (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ChannelID INTEGER NOT NULL,
    RuleID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ChannelID, RuleID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (RuleID) REFERENCES Rules(ID)
);

CREATE TABLE IF NOT EXISTS Memberships (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS MutedChannels (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Mods (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Posts (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Title TEXT NOT NULL,
    Content TEXT NOT NULL,
    Images TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    IsCommentable BOOLEAN NOT NULL,
    Author TEXT NOT NULL,
    AuthorID INTEGER NOT NULL,
    AuthorAvatar TEXT,
    IsFlagged BOOLEAN,
    FOREIGN KEY (Author) REFERENCES Users(Username) ON DELETE CASCADE,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar)
);

CREATE TABLE IF NOT EXISTS PostChannels (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    PostID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE IF NOT EXISTS Images (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID INTEGER NOT NULL,
    PostID INTEGER NOT NULL,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PostImages (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    PostID INTEGER NOT NULL,
    ImageID TEXT NOT NULL,
    FOREIGN KEY (PostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ImageID) REFERENCES Images(ID)
);

CREATE TABLE IF NOT EXISTS Comments (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Content TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CommentedPostID INTEGER,
    CommentedCommentID INTEGER,
    IsCommentable BOOLEAN,
    IsFlagged BOOLEAN,
    Author TEXT NOT NULL,
    AuthorID INTEGER NOT NULL,
    AuthorAvatar TEXT,
    ChannelName TEXT NOT NULL,
    ChannelID INTEGER NOT NULL,
    FOREIGN KEY (Author) REFERENCES Users(Username) ON DELETE CASCADE,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar) ON DELETE CASCADE,
    FOREIGN KEY (ChannelName) REFERENCES Channels(Name),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (CommentedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (CommentedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS PostReplies (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ParentPostID INTEGER NOT NULL,
    ReplyID INTEGER NOT NULL,
    FOREIGN KEY (ParentPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReplyID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS CommentReplies (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ParentCommentID INTEGER NOT NULL,
    ReplyID INTEGER NOT NULL,
    FOREIGN KEY (ParentCommentID) REFERENCES Comments(ID),
    FOREIGN KEY (ReplyID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Reactions (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Liked BOOLEAN,
    Disliked BOOLEAN,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID INTEGER NOT NULL,
    ReactedPostID INTEGER,
    ReactedCommentID INTEGER,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReactedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (ReactedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Flags (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    FlagType TEXT NOT NULL,
    Content TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Approved BOOLEAN NOT NULL,
    AuthorID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    FlaggedUserID BLOB,
    FlaggedPostID INTEGER,
    FlaggedCommentID INTEGER,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (AuthorID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedUserID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedPostID) REFERENCES Posts(ID) ON DELETE CASCADE,
    FOREIGN KEY (FlaggedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE IF NOT EXISTS Notifications (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Notification TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Read BOOLEAN,
    Archived BOOLEAN
);

CREATE TABLE IF NOT EXISTS NotificationsUsers (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID BLOB,
    NotificationID INTEGER,
    FOREIGN KEY (UserID) REFERENCES Users(ID),
    FOREIGN KEY (NotificationID) REFERENCES Notifications(ID)
);

-- Indices
CREATE INDEX IF NOT EXISTS idx_users_sessiontoken ON Users(SessionToken);
CREATE INDEX IF NOT EXISTS idx_users_csrftoken ON Users(CsrfToken);
CREATE INDEX IF NOT EXISTS idx_posts_authorid ON Posts(AuthorID);
CREATE INDEX IF NOT EXISTS idx_flags_post ON Flags(FlaggedPostID);
CREATE INDEX IF NOT EXISTS idx_flags_comment ON Flags(FlaggedCommentID);
CREATE INDEX IF NOT EXISTS idx_flags_user ON Flags(FlaggedUserID);
CREATE INDEX IF NOT EXISTS idx_comments_postid ON Comments(CommentedPostID);
CREATE INDEX IF NOT EXISTS idx_postchannels_postid ON PostChannels(PostID);

COMMIT TRANSACTION;

PRAGMA ignore_check_constraints = OFF;
PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;
