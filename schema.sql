PRAGMA journal_mode = MEMORY;
PRAGMA synchronous = OFF;
PRAGMA foreign_keys = OFF;
PRAGMA ignore_check_constraints = OFF;
PRAGMA auto_vacuum = NONE;
PRAGMA secure_delete = OFF;
BEGIN TRANSACTION;

CREATE TABLE Users (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Username TEXT NOT NULL,
    Password TEXT NOT NULL,
    Email_address TEXT NOT NULL,
    Avatar TEXT,  -- Store UUID as TEXT
    Banner TEXT,  -- Store UUID as TEXT
    Description TEXT,
    Usertype TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Time_since TEXT,
    Is_flagged BOOLEAN 
);

CREATE TABLE Bookmarks (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  PostID INTEGER,
  CommentID INTEGER,
  ChannelID INTEGER, 
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (PostID) REFERENCES Posts(ID),
  FOREIGN KEY (CommentID) REFERENCES Comments(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Loyalty (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Follower INT NOT NULL,
  Followee INT NOT NULL,
  FOREIGN KEY (Follower) REFERENCES Users(ID),
  FOREIGN KEY (Followee) REFERENCES Users(ID)
);

CREATE TABLE Channels (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Name TEXT NOT NULL,
  Avatar TEXT, 
  Description TEXT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Rules TEXT,
  Privacy BOOLEAN NOT NULL
);

CREATE TABLE Memberships (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  UserID INT NOT NULL,
  ChannelID INT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (UserID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Muted_channels (
     ID INTEGER PRIMARY KEY AUTOINCREMENT,
     UserID INT NOT NULL,
     ChannelID INT NOT NULL,
     Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (UserID) REFERENCES Users(ID),
     FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Mods (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  UserID INTEGER NOT NULL,
  ChannelID INTEGER NOT NULL,
  FOREIGN KEY (UserID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Posts (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Title TEXT NOT NULL,
  Content TEXT NOT NULL,
  Images TEXT,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Commentable BOOLEAN NOT NULL,
  Author TEXT NOT NULL,
  AuthorID INTEGER NOT NULL,
  ChannelName TEXT NOT NULL,
  ChannelID INTEGER NOT NULL,
  Is_flagged BOOLEAN,
  FOREIGN KEY (Author) REFERENCES Users(Username),
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelName) REFERENCES Channels(Name),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Images (
  ID TEXT PRIMARY KEY,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  AuthorID INT NOT NULL,
  PostID INT NOT NULL,
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (PostID) REFERENCES Posts(ID)
);

CREATE TABLE Comments (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Content TEXT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  AuthorID INTEGER NOT NULL,
  ChannelID INTEGER NOT NULL,
  Is_reply BOOLEAN,
  Commented_postID INTEGER,
  Commented_commentID INTEGER,
  Is_flagged BOOLEAN, -- Store JSON as TEXT
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
  FOREIGN KEY (Commented_postID) REFERENCES Posts(ID),
  FOREIGN KEY (Commented_commentID) REFERENCES Comments(ID)
);

CREATE TABLE Reactions (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Liked BOOLEAN,
    Disliked BOOLEAN,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    Reacted_postID INTEGER,
    Reacted_commentID INTEGER,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (Reacted_postID) REFERENCES Posts(ID),
    FOREIGN KEY (Reacted_commentID) REFERENCES Comments(ID)
);

CREATE TABLE Flags (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Flag_type TEXT NOT NULL,
    Content TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Approved BOOLEAN NOT NULL,
    AuthorID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    Flagged_userID INTEGER,
    Flagged_postID INTEGER,
    Flagged_commentID INTEGER,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (AuthorID) REFERENCES Users(ID),
    FOREIGN KEY (Flagged_userID) REFERENCES Users(ID),
    FOREIGN KEY (Flagged_postID) REFERENCES Posts(ID),
    FOREIGN KEY (Flagged_commentID) REFERENCES Comments(ID)
);

-- Indices
CREATE INDEX idx_Users_ID ON Users (ID);
CREATE INDEX idx_Channels_ID ON Channels (ID);
CREATE INDEX idx_Posts_ID ON Posts (ID);
CREATE INDEX idx_Comments_ID ON Comments (ID);

COMMIT TRANSACTION;
PRAGMA ignore_check_constraints = OFF;
PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;

