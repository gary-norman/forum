PRAGMA journal_mode = MEMORY;
PRAGMA synchronous = OFF;
PRAGMA foreign_keys = ON;
PRAGMA ignore_check_constraints = OFF;
PRAGMA auto_vacuum = NONE;
PRAGMA secure_delete = OFF;
BEGIN TRANSACTION;

CREATE TABLE Users (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Username TEXT NOT NULL,
    EmailAddress TEXT NOT NULL,
    Avatar TEXT,  -- Store UUID as TEXT
    Banner TEXT,  -- Store UUID as TEXT
    Description TEXT,
    Usertype TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    IsFlagged BOOLEAN,
    SessionToken TEXT,
    CsrfToken TEXT,
    HashedPassword TEXT

);

CREATE TABLE Bookmarks (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  PostID INTEGER,
  CommentID INTEGER,
  ChannelID INTEGER, 
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (PostID) REFERENCES Posts(ID),
  FOREIGN KEY (CommentID) REFERENCES Comments(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Following (
     ID INTEGER PRIMARY KEY AUTOINCREMENT,
     UserID INT NOT NULL,
     FollowingUserID INT NOT NULL,
     FOREIGN KEY (UserID) REFERENCES Users(ID),
     FOREIGN KEY (FollowingUserID) REFERENCES Users(ID)
);

CREATE TABLE Followers (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID INT NOT NULL,
    FollowerUserID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(ID),
    FOREIGN KEY (FollowerUserID) REFERENCES Users(ID)
);

CREATE TABLE Channels (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  OwnerID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Avatar TEXT,
  Banner TEXT,
  Description TEXT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Privacy BOOLEAN NOT NULL,
  IsMuted BOOLEAN NOT NULL,
  IsFlagged BOOLEAN,
  FOREIGN KEY (OwnerID) REFERENCES Users(ID)
);

CREATE TABLE Rules (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Rule TEXT
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ChannelsRules (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ChannelID INTEGER NOT NULL,
    RuleID TEXT NOT NULL,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(ChannelID, RuleID),
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (RuleID) REFERENCES Rules(ID)
);

CREATE TABLE Memberships (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  UserID INT NOT NULL,
  ChannelID INT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (UserID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE MutedChannels (
     ID INTEGER PRIMARY KEY AUTOINCREMENT,
     UserID INT NOT NULL,
     ChannelID INT NOT NULL,
     Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY (UserID) REFERENCES Users(ID),
     FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Mods (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  UserID INTEGER NOT NULL,
  ChannelID INTEGER NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (UserID) REFERENCES Users(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Posts (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Title TEXT NOT NULL,
  Content TEXT NOT NULL,
  Images TEXT,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  IsCommentable BOOLEAN NOT NULL,
  Author TEXT NOT NULL,
  AuthorID INTEGER NOT NULL,
  AuthorAvatar TEXT,
  ChannelName TEXT NOT NULL,
  ChannelID INTEGER NOT NULL,
  IsFlagged BOOLEAN,
  FOREIGN KEY (Author) REFERENCES Users(Username),
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar),
  FOREIGN KEY (ChannelName) REFERENCES Channels(Name),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE PostChannels (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  PostID INTEGER NOT NULL,
  ChannelID INTEGER NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (PostID) REFERENCES Posts(ID),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID)
);

CREATE TABLE Images (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  AuthorID INT NOT NULL,
  PostID INT NOT NULL,
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (PostID) REFERENCES Posts(ID)
);

CREATE TABLE PostImages (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  PostID INTEGER NOT NULL,
  ImageID TEXT NOT NULL,
  FOREIGN KEY (PostID) REFERENCES Posts(ID),
  FOREIGN KEY (ImageID) REFERENCES Images(ID)
);

CREATE TABLE Comments (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  Content TEXT NOT NULL,
  Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CommentedPostID INTEGER,
  CommentedCommentID INTEGER,
  IsCommentable BOOLEAN,
  IsFlagged BOOLEAN,
  Author TEXT NOT NULL,
  AuthorID INTEGER NOT NULL,
  AuthorAvatar TEXT,
  ChannelName TEXT NOT NULL,
  ChannelID INTEGER NOT NULL,
  FOREIGN KEY (Author) REFERENCES Users(Username),
  FOREIGN KEY (AuthorID) REFERENCES Users(ID),
  FOREIGN KEY (AuthorAvatar) REFERENCES Users(Avatar),
  FOREIGN KEY (ChannelName) REFERENCES Channels(Name),
  FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
  FOREIGN KEY (CommentedPostID) REFERENCES Posts(ID),
  FOREIGN KEY (CommentedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE PostReplies (
  ID INTEGER PRIMARY KEY AUTOINCREMENT,
  ParentPostID INTEGER NOT NULL,
  ReplyID INTEGER NOT NULL,
  FOREIGN KEY (ParentPostID) REFERENCES Posts(ID),
  FOREIGN KEY (ReplyID) REFERENCES Comments(ID)
);

CREATE TABLE CommentReplies (
     ID INTEGER PRIMARY KEY AUTOINCREMENT,
     ParentCommentID INTEGER NOT NULL,
     ReplyID INTEGER NOT NULL,
     FOREIGN KEY (ParentCommentID) REFERENCES Comments(ID),
     FOREIGN KEY (ReplyID) REFERENCES Comments(ID)
);

CREATE TABLE Reactions (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Liked BOOLEAN,
    Disliked BOOLEAN,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AuthorID INTEGER NOT NULL,
    ReactedPostID INTEGER,
    ReactedCommentID INTEGER,
    FOREIGN KEY (AuthorID) REFERENCES Users(ID),
    FOREIGN KEY (ReactedPostID) REFERENCES Posts(ID),
    FOREIGN KEY (ReactedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE Flags (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    FlagType TEXT NOT NULL,
    Content TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Approved BOOLEAN NOT NULL,
    AuthorID INTEGER NOT NULL,
    ChannelID INTEGER NOT NULL,
    FlaggedUserID INTEGER,
    FlaggedPostID INTEGER,
    FlaggedCommentID INTEGER,
    FOREIGN KEY (ChannelID) REFERENCES Channels(ID),
    FOREIGN KEY (AuthorID) REFERENCES Users(ID),
    FOREIGN KEY (FlaggedUserID) REFERENCES Users(ID),
    FOREIGN KEY (FlaggedPostID) REFERENCES Posts(ID),
    FOREIGN KEY (FlaggedCommentID) REFERENCES Comments(ID)
);

CREATE TABLE Notifications (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Notification TEXT,
    Created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Read BOOLEAN,
    Archived BOOLEAN
);

CREATE TABLE NotificationsUsers (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID INT,
    NotificationID INT,
    FOREIGN KEY (UserID) REFERENCES Users(ID),
    FOREIGN KEY (NotificationID) REFERENCES Notifications(ID)
);

-- Indices
-- INFO these are not necessary as sqlite automatically creates indexes for primary keys

COMMIT TRANSACTION;
PRAGMA ignore_check_constraints = OFF;
PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;

